一，

<!-- html为了实现加粗 加颜色 放大 斜体 这么一个小的需求 嵌套了太多的标签
    所以很多html的样式标签不怎么使用了，从而引入css -->
    <p>
        <!-- b标签（bold） 可以给文字加粗的标签 -->
        <b>
            <!-- font 可以改变字体颜色 和 字体尺寸-->
            <font color="red" size="56">
                <i>这是一个段落</i>
            </font> 
        </b>
    </p> -->

    <!-- 所以只需要html完成网页内容的问题，css来解决内容与表现分离的问题 -->
    <!-- 通过css完成上面的功能 内容写在title下面 -->
    <!-- 将上述删掉测试 -->

二，

css代码编写位置：
1，内联样式：
例如：
<p style="color:red">这是一个段落</p>
2，内部样式：
例如：
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>css语法基础</title>
    <style>
        p{
            /* px:pixel像素 */
            font-size: 48px;
        }
    </style>
</head>
<body>
    <p style="color:red">这是一个段落</p>
</body>
</html>
3，外部样式：
新建一个css文件，来定义样式
利用这个与html文件建立联系
<link rel="stylesheet" href="style.css">
优点：可以被多个html文件中使用

当三个位置更改样式时，如果内部有重复，就会有覆盖的问题，满足就近原则
若没有重复的，所有更改共同执行
覆盖方式为：
最后显示在网页上的，是在代码排在最后面的显示在网页上，因为代码从上
往下执行，所以前面执行的被覆盖，网页上看不到
也就是所谓的优先级问题，一般情况下的优先级为：
*内联样式
*内部样式和外部样式谁的代码在下面就最后执行谁

三，

除了用英文单词还可以用十六进制来表示颜色
例如：
红色red 可以用 #ff0000 代替
#ff0000 其中两个数为一组 分别为：ff 00 00 为rgb(red green blue)的缩写
分别为 红 绿 蓝 ff表示十六进制最大数，00为最小数
所以#ff0000 为红 00ff00为绿 0000ff为蓝

id选择器的权重值更高，如果正常的选择器和id选择器同时对一个标签更改样式
只会执行id选择器

class（类）可以重复 id不可以重复，id是唯一的
class可以在中间加多个属性，通过用空格隔开
例如：
<li class="bg-red fs-36">item 3</li>
这样呢.bg-red 和 .fs-36 就发生了重叠，共同起作用，叫多类选择器
多类选择器也有优先级关系：
但是与class的内部属性无关
例如：
<li class="bg-red fs-36 bg-blue">item 2</li>
<li class="bg-blue bg-red fs-36">item 2</li>
对于颜色的改变没有什么影响
但是与style内的声明顺序有关，在下面声明声明的会把上面声明的覆盖掉
和前面所说的一个道理






