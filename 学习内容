可以通过浏览器查看网页开发的源代码：
例如：谷歌浏览器
点击右上角的三个点--》更多工具--》开发者工具
通过这个就可查看


一，

<!-- html为了实现加粗 加颜色 放大 斜体 这么一个小的需求 嵌套了太多的标签
    所以很多html的样式标签不怎么使用了，从而引入css -->
    <p>
        <!-- b标签（bold） 可以给文字加粗的标签 -->
        <b>
            <!-- font 可以改变字体颜色 和 字体尺寸-->
            <font color="red" size="56">
                <i>这是一个段落</i>
            </font> 
        </b>
    </p> -->

    <!-- 所以只需要html完成网页内容的问题，css来解决内容与表现分离的问题 -->
    <!-- 通过css完成上面的功能 内容写在title下面 -->
    <!-- 将上述删掉测试 -->

二，

css代码编写位置：
1，内联样式：
例如：
<p style="color:red">这是一个段落</p>
2，内部样式：
例如：
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>css语法基础</title>
    <style>
        p{
            /* px:pixel像素 */
            font-size: 48px;
        }
    </style>
</head>
<body>
    <p style="color:red">这是一个段落</p>
</body>
</html>
3，外部样式：
新建一个css文件，来定义样式
利用这个与html文件建立联系
<link rel="stylesheet" href="style.css">
优点：可以被多个html文件中使用

当三个位置更改样式时，如果内部有重复，就会有覆盖的问题，满足就近原则
若没有重复的，所有更改共同执行
覆盖方式为：
最后显示在网页上的，是在代码排在最后面的显示在网页上，因为代码从上
往下执行，所以前面执行的被覆盖，网页上看不到
也就是所谓的优先级问题，一般情况下的优先级为：
*内联样式
*内部样式和外部样式谁的代码在下面就最后执行谁

三，

除了用英文单词还可以用十六进制来表示颜色
例如：
红色red 可以用 #ff0000 代替
#ff0000 其中两个数为一组 分别为：ff 00 00 为rgb(red green blue)的缩写
分别为 红 绿 蓝 ff表示十六进制最大数，00为最小数
所以#ff0000 为红 00ff00为绿 0000ff为蓝

id选择器的权重值更高，如果正常的选择器和id选择器同时对一个标签更改样式
只会执行id选择器

class（类）可以重复 id不可以重复，id是唯一的
class可以在中间加多个属性，通过用空格隔开
例如：
<li class="bg-red fs-36">item 3</li>
这样呢.bg-red 和 .fs-36 就发生了重叠，共同起作用，叫多类选择器
多类选择器也有优先级关系：
但是与class的内部属性无关
例如：
<li class="bg-red fs-36 bg-blue">item 2</li>
<li class="bg-blue bg-red fs-36">item 2</li>
对于颜色的改变没有什么影响
但是与style内的声明顺序有关，在下面声明声明的会把上面声明的覆盖掉
和前面所说的一个道理

四，

css权重（大小顺序）
！important > 内联 > id > class | 属性 | 伪类 > 标签 | 伪元素 > 通配符
如下：
                                          权重值
！important                               Infinity（无穷）
内联样式（style）                          1000
id选择器                                  100
class选择器 | 属性选择器 | 伪类选择器       10
标签选择器 | 伪元素                        1   
通配符选择器                               0

前面所说的覆盖问题，在这个权重值看来，先遵循权重值。
所以说主要看权重值。

五，

背景定位 background-position:
存在两个方向，水平方向和数值方向 
水平方向控制的属性有 left(左) center(中) right(右)
垂直方向控制的属性有 top(上) center(中) bottom(向下)
如果用如上单词 水平和垂直方向谁先声明都可以（根据个人习惯自己声明）
例如：
background-position: left center;
background-position: center left;
但是如果用数值水平和垂直就不是这样了
相当于平面直角坐标系 x 和 y 轴，默认左上角是原点
水平向右是正数 ，水平向左是负数
垂直向下是正数 ，垂直向上是负数
例如：
background-position: 0px 0px ;相当于background-position: left top;
background-position: 20px 30px ;相当于水平向右移动20，垂直向下移动30
所以数值的声明顺序为，先水平后垂直
background-position: 50% 50%;相当于
background-position: center center ; 可以把图片放到div块状区域之间

行高
line-height
当只有单行文字时，可以通过行高间接完成文字垂直居中
例如：可以把高度的值和行高写成一样
height: 200px;
line-height: 200px;
这个就可以完成单行文字的垂直居中，但是多行文字就不管用了

css字体属性：
属性                 描述
font                 简写属性。作用是把所有针对字体的属性设置在一个声明中（和background一样）
font-family          设置字体系类，例如宋体啥的
font-size            设置字体尺寸
font-style           改变字体风格
font-weight          设置字体粗细

css边框属性：

css列表样式：

六，

ccs的盒模型中，一切皆可框

css的框模型中，由内层到外层为
element->padding->border->margin
元素->内边距->边框->外边距
ie
当把html代码中第一行<!DOCTYPE html>删掉的时候，
把代码拿到以前早版的WindowsXP系统IE6浏览器中运行，
height 和 width 代表的就不再是只有内容的高和宽
代表的是内容和内边距和边框共同的宽和高
我们把这个现象叫做怪异现象
但是现在也不怎么用老版的浏览器
如何解决这个问题呢？
提供了box-sizing: 这个
例如：box-sizing: border-box  代表的是内容+内边距+边框共同的宽和高
      box-sizing: content-box  代表的只有内容的宽和高
上面这个知识点也会出现在面试中；

 margin: 50px 70px 90px 110px;
 如果只是margin: 50px；
 那么是        上下左右  都是50px
 margin: 50px 70px；
 那么是  上下  左右
 margin: 50px 70px 90px；
 那么是   上   左右 下
 如果是 margin: 50px 70px 90px 110px;
 那么是          上   右   下    左    （顺时针顺序）
 padding    也是如此。

 body标签浏览器会自动给它生成一个外边距，如果不想要它，
 可以用如下方法清零
 <style>
    body{
        margin: 0;
    }
</style>
0后面不需要写px（像素）

不同的浏览器中边距会出现不同的问题，解决方式也不同
所以建议每个代码都加上下面这句代码：
*{
    padding: 0;
    margin: 0;
} 
这个是：css reset 样式重置；

七，

块级元素（垂直排列）的默认行为：
垂直排列 且 宽度自适应
行级元素（水平排列）的默认行为：
宽度由内容决定
可以用display属性来改变它们

块级元素是可以设置宽和高的，行级元素是不可以设置宽和高的
如果即想要水平排列又可以设置宽和高可以用
display:inline-block;
这条语句就是可以同时具备行和块的属性
但是在IE6中是不好使的

css定位（利用 position 属性）

css相对定位
设置为相对定位的元素框会偏移某个距离。元素仍然保持其未定位前的形状，
它原本所占的空间仍保留，不会被下一个元素占用
从原来位置为起点偏移（相对于它原来自己的位置）

css绝对定位
绝对定位的元素的位置相对于最近已定位祖先元素，如果元素没有已定位的祖先
元素，那么它的位置相对于最初的包含块，它原本所占的空间就不存在了，会被下一个元素占用
也就是说它会向上找自己已经定位的祖先元素，作为相对元素来偏移
如果祖先元素没有被定位，那就一直向上找，直到找到为止

























